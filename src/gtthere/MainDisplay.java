/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainDisplay.java
 * Image Editing Application
 * Created on Oct 2, 2009, 7:53:47 PM
 */

package gtthere;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.image.*;
import javax.imageio.*;
import javax.swing.JOptionPane;
import javax.swing.JDialog;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.ImageIcon;
import javax.swing.BoxLayout;
import javax.swing.Box;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.JTabbedPane;
import javax.swing.JPanel;
import javax.swing.JFrame;
import java.beans.*; //Property change stuff
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.Iterator;
import javax.imageio.*;
import javax.imageio.stream.*;


/** MainDisplay shows the GUI, with ediit buttons, sliders, Color chooser
 * Image and implements all the GUI controls
 *
 * @author Hemant Deshpande
 */
public class MainDisplay extends javax.swing.JFrame {
    private String checkfile;
    private JFileChooser fc;
    public File file;
    public Image MainImg;
    public Image ModImg;
    public int MainImgWidth;
    public int MainImgHeight;
    public Color newColor;
    public Color[] reColor;
    private byte btMark = (byte)3; //0x03;//3 use with OR to write 1, AND to check 1/0
    private byte bMark = (byte)12; //0x0C;//12 use with OR to write 1, AND to check 1/0
    private byte bEdge = (byte)48; //0x30;//48 use with OR to write 1, AND to check 1/0
    private byte bNtMark = (byte)60; //0x3C;//60 use with AND to write 0
    private byte bNMark = (byte)51; //0x33;//51 use with AND to write 0
    private byte bNEdge = (byte)15; //0x0F;//15 use with AND to write 0
    private byte[][] ImageData;
    private byte[] Selected;
    public int[] PixelData;
    public int[] ModData;
    private MemoryImageSource MIS;
    private ColorModel ICM;
    public double SolpeMult, Light, TextureX, Zoom;
    public int BrushWidth, SenX, ex, ey, bx, by;
    public JFrame frame;//check for dialog boxes
    private boolean boolEdgeDetect = false;
    private boolean boolAddLEdge = false;
    private boolean boolTouchUpPaint = false;
    private boolean boolReplacePaint = false;
    private boolean boolGetColor = false;
    private boolean boolHaveColor = false;
    private boolean boolAddPaint = false;
    private boolean boolAddCEdge = false;
    private boolean boolSketchOK = false;
    private boolean boolEraseEdge = false;
    private boolean boolCircle = false;
    private boolean boolRect = false;
    private boolean boolAddShape = false;
    private boolean boolSelectPaint = false;
    /** Creates new form MainDisplay */
    public MainDisplay() {
        initComponents();
        SolpeMult = 1.45;
        TextureX = 1.0;
        Light = 0.0;
        BrushWidth = 50; SenX=14; senSlider.setValue(14);
        Zoom = 1.0; ZoomX.setValue(50); //BrushSpinner.setValue(50);
        ImageScrollPaneLabel.setIcon(AddIcon.InitialImage());
        //SelectColor.setPreviewPanel(new JPanel());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Load = new javax.swing.JButton();
        ImageScrollPane = new javax.swing.JScrollPane();
        ImageScrollPaneLabel = new javax.swing.JLabel();
        SaveOutline = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        SavetoFile = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        ShowEdges = new javax.swing.JButton();
        PaintComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        SelectShape = new javax.swing.JButton();
        undoPaint = new javax.swing.JButton();
        BrushSpinner = new javax.swing.JSpinner();
        TextureSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        ZoomX = new javax.swing.JSlider();
        EdgeComboBox = new javax.swing.JComboBox();
        EdgeSlope = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        senSlider = new javax.swing.JSlider();
        SelectColor = new javax.swing.JColorChooser();
        ClearShape = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("http://www.apicview.com/");

        Load.setText("Open");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        ImageScrollPaneLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        ImageScrollPaneLabel.setAlignmentX(0.5F);
        ImageScrollPaneLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        ImageScrollPaneLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImageScrollPaneLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ImageScrollPaneLabelMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ImageScrollPaneLabelMouseReleased(evt);
            }
        });
        ImageScrollPaneLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ImageScrollPaneLabelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                ImageScrollPaneLabelMouseMoved(evt);
            }
        });
        ImageScrollPane.setViewportView(ImageScrollPaneLabel);

        SaveOutline.setText("Save Outline");
        SaveOutline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveOutlineActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.setActionCommand("SavePaint");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        SavetoFile.setText("Save to File");
        SavetoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavetoFileActionPerformed(evt);
            }
        });

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        ShowEdges.setText("Show Outlines");
        ShowEdges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowEdgesActionPerformed(evt);
            }
        });

        PaintComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Replace Color", "Touch Up Paint", "Paint Selected Area", "Paint Outlined Area", " " }));
        PaintComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaintComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Brush Size:");

        SelectShape.setText("Select Area");
        SelectShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectShapeActionPerformed(evt);
            }
        });

        undoPaint.setText("Undo Paint");
        undoPaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoPaintActionPerformed(evt);
            }
        });

        BrushSpinner.setModel(new javax.swing.SpinnerNumberModel(50, 1, 200, 1));
        BrushSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrushSpinnerStateChanged(evt);
            }
        });

        TextureSlider.setMajorTickSpacing(25);
        TextureSlider.setMinorTickSpacing(5);
        TextureSlider.setPaintTicks(true);
        TextureSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast"));
        TextureSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TextureSliderStateChanged(evt);
            }
        });

        jLabel2.setText("Paint Options:");

        ZoomX.setMajorTickSpacing(10);
        ZoomX.setMinorTickSpacing(2);
        ZoomX.setPaintTicks(true);
        ZoomX.setBorder(javax.swing.BorderFactory.createTitledBorder("Zoom"));
        ZoomX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ZoomXStateChanged(evt);
            }
        });

        EdgeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Auto Detect Outlines", "Add Straight Line", "Add Curved Line", "Add Oval", "Add Rectangle", "Erase Outlines", " " }));
        EdgeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeComboBoxActionPerformed(evt);
            }
        });

        EdgeSlope.setMajorTickSpacing(25);
        EdgeSlope.setMinorTickSpacing(5);
        EdgeSlope.setPaintTicks(true);
        EdgeSlope.setBorder(javax.swing.BorderFactory.createTitledBorder("Brightness"));
        EdgeSlope.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                EdgeSlopeStateChanged(evt);
            }
        });

        jLabel1.setText("Outline Options:");

        senSlider.setMajorTickSpacing(7);
        senSlider.setMaximum(28);
        senSlider.setMinorTickSpacing(1);
        senSlider.setPaintTicks(true);
        senSlider.setBorder(javax.swing.BorderFactory.createTitledBorder("Threshold"));
        senSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                senSliderStateChanged(evt);
            }
        });

        ClearShape.setText("Clear Selection");
        ClearShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearShapeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(EdgeSlope, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextureSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ZoomX, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(senSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(359, 359, 359))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BrushSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(SelectShape, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ClearShape, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(PaintComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(undoPaint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(EdgeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(ShowEdges, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(141, 141, 141))))
                    .addComponent(SelectColor, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ShowEdges, undoPaint});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {EdgeComboBox, PaintComboBox});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {EdgeSlope, TextureSlider, ZoomX, senSlider});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ShowEdges)
                    .addComponent(jLabel1)
                    .addComponent(EdgeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PaintComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(undoPaint)
                    .addComponent(jLabel2))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(BrushSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectShape)
                    .addComponent(ClearShape))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(senSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EdgeSlope, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TextureSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZoomX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SelectColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ClearShape, SelectShape});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {EdgeSlope, TextureSlider, ZoomX, senSlider});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Load)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveOutline, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Clear)
                        .addGap(4, 4, 4)
                        .addComponent(SavetoFile))
                    .addComponent(ImageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Clear, Load, Save, SavetoFile});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(Save)
                            .addComponent(SavetoFile)
                            .addComponent(Load)
                            .addComponent(Clear)
                            .addComponent(SaveOutline))
                        .addGap(4, 4, 4)
                        .addComponent(ImageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
        if (fc == null) {
            fc = new JFileChooser();
            fc.addChoosableFileFilter(new ImageFilter());
            fc.setAcceptAllFileFilterUsed(false);
            fc.setAccessory(new ImagePreview(fc));
        }

        //Show it.
        int returnVal = fc.showDialog(MainDisplay.this,"Load");
        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            String extension = Utils.getExtension(file);
            if(extension!=null){
                if(extension.equals(Utils.jpeg) ||
                    extension.equals(Utils.jpg) ||
                    extension.equals(Utils.png)){
                    checkfile = file.getName();
                    try {
                    MainImg = ImageIO.read(file);
                    } catch (IOException e) {
                        System.out.println ("Error loading image : " + e.getMessage());
                    }
                    checkfile = file.getName();

                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    MainImgWidth = MainImg.getWidth(this);
                    MainImgHeight = MainImg.getHeight(this);
                    GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
                    gifPixelGrabber.grabPixels();
                    ICM = gifPixelGrabber.getColorModel();
                    Object m_pixelData=gifPixelGrabber.getPixels();
                    PixelData = (int[])m_pixelData;
                    MIS = new MemoryImageSource(MainImgWidth, MainImgHeight, PixelData, 0, MainImgWidth);
                    MIS.setAnimated(true);
                    MIS.setFullBufferUpdates(false);
                    MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
                    ModImg = createImage(MIS);
                    boolAddLEdge = false;
                    boolEdgeDetect = false;
                    boolTouchUpPaint = false;
                    boolAddPaint = false; boolSelectPaint = false;
                    boolAddCEdge = false;
                    boolEraseEdge = false;
                    boolReplacePaint = false;
                    boolHaveColor=false; boolAddShape = false; Selected=null;
                    boolGetColor=false; boolCircle = false; boolRect = false;
                    ImageData = new byte[MainImgHeight][MainImgWidth];
                    for(int i=0; i<MainImgHeight; i++){
                        for(int j=0; j<MainImgWidth; j++){
                            ImageData[i][j]=0;
                        }
                    }
                }
                if(MainImgWidth>625) Zoom = MainImgWidth/625;
                else Zoom = 1.0;
                int tmp = (int)(50.0/Zoom) - 1;
                ZoomX.setValue(tmp); SenX=14; senSlider.setValue(14);
                ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
                this.setCursor(Cursor.getDefaultCursor());
                if(extension.equals(Utils.msk)){
                    if(MainImg==null){
                        JOptionPane.showMessageDialog(this,"Load the image file first", "Error",
                        JOptionPane.ERROR_MESSAGE);
                        }
                    else{
                        EdgeMask emask = null;
                        try {
                        ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
                        emask = (EdgeMask)in.readObject();
                        in.close();
                        System.out.println("Outline read successfully");
                        }
                        catch (ClassNotFoundException e)
                        {
                        System.out.println("Class not found : "+ e.getMessage());
                        }
                        catch (IOException e) {
                        System.out.println("Error reading msk file : "+ e.getMessage());
                        }
                        if(emask.getImgWidth()==MainImgWidth && emask.getImgHeight()==MainImgHeight){
                            if(emask.getImgName().equals(checkfile)){
                                ImageData = emask.getEdgeData();
                                boolSketchOK = true;
                            }
                            else {
                                JOptionPane.showMessageDialog(this,"Image file name in the outline file does not match\n"
                                        +"to the image file loaded.", "Warning",
                                JOptionPane.WARNING_MESSAGE);
                                //EdgeMatrix = emask.getEdgeData();
                                ImageData = emask.getEdgeData();
                                boolSketchOK = true;
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(this,"The outline data does not match image data.\n"
                                    +"Ignoring outline data.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }

        }
        else {
            //Barf.append("Load cancelled by user." + newline);
        }
        //Reset the file chooser for the next time it's shown.
        fc.setSelectedFile(null);
        file=null;
        fc = null;
    }//GEN-LAST:event_LoadActionPerformed

    private void undoPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoPaintActionPerformed
        if(MainImg!=null){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            for(int i = 0; i < MainImgHeight; i++){
                for(int j =0; j< MainImgWidth; j++){
                    //tempMarkedX[i][j] = MarkedX[i][j];
                    if(((byte)(ImageData[i][j] & bMark))== 12){
                        ImageData[i][j] = (byte)(ImageData[i][j] | btMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNtMark);
                    }
                }
            }
        MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
        ModImg = createImage(MIS);
        if(boolSelectPaint==true && Selected!=null){
            PaintSelected PaintS = new PaintSelected(PixelData, Selected, MainImgWidth, MainImgHeight);
            ModImg = AddIcon.MergeImage(MainImg, PaintS.GetShapeImage(), MainImgWidth, MainImgHeight);
            boolSelectPaint=false;
        }
        ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_undoPaintActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null && boolAddLEdge!=true && boolAddCEdge!=true && boolEraseEdge!=true && boolAddShape!=true
                && boolCircle!=true && boolRect!=true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(ModImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            for(int i = 0; i < MainImgHeight; i++){
                for(int j =0; j< MainImgWidth; j++){
                    //MarkedX[i][j] = tempMarkedX[i][j];
                    if(((byte)(ImageData[i][j] & btMark)) == 3){
                        ImageData[i][j] = (byte)(ImageData[i][j] | bMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNMark);
                    }
                }
            }
        MainImg = createImage(new MemoryImageSource(MainImgWidth,MainImgHeight,PixelData,0,MainImgWidth));
        MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
        ModImg = createImage(MIS);
        this.setCursor(Cursor.getDefaultCursor());
        if(boolSelectPaint==true) boolSelectPaint=false;
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void SavetoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavetoFileActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
            if (fc == null) {
                fc = new JFileChooser();
                fc.addChoosableFileFilter(new GIFFilter());
                fc.addChoosableFileFilter(new JPGFilter());
                fc.addChoosableFileFilter(new PNGFilter());
                fc.setAcceptAllFileFilterUsed(false);
                fc.setAccessory(new ImagePreview(fc));
            }
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if(MainImg!=null && boolAddLEdge!=true && boolAddCEdge!=true && boolEraseEdge!=true){
                GetImageInfo gifPixelGrabber=new GetImageInfo(ModImg);
                gifPixelGrabber.grabPixels();
                Object m_pixelData=gifPixelGrabber.getPixels();
                PixelData = (int[])m_pixelData;
                MainImg = createImage(new MemoryImageSource(MainImgWidth,MainImgHeight,PixelData,0,MainImgWidth));
                MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
                for(int i = 0; i < MainImgHeight; i++){
                    for(int j =0; j< MainImgWidth; j++){
                    //MarkedX[i][j] = tempMarkedX[i][j];
                    if(((byte)(ImageData[i][j] & btMark)) == 3){
                        ImageData[i][j] = (byte)(ImageData[i][j] | bMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNMark);
                    }
                    }
                }
            }
            int returnVal = fc.showDialog(MainDisplay.this,"Save File");
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
                String pathname = null;
                try{
                    pathname = file.getCanonicalPath();
                } catch (IOException e){}
                String format = fc.getFileFilter().getDescription();
                boolean type = true;
                if(format.equals("JPEG Image")){
                    type = false;
                    format = "jpg";
                }
                if(format.equals("PNG Image")) format = "png";
                if(format.equals("GIF Image")) format = "gif";
                String extension = pathname+"."+format;
                file = new File(extension);
                //this.setCursor(Cursor.getDefaultCursor());
                this.setCursor(Cursor.getDefaultCursor());
                //Process the results.
                BufferedImage bufMainImg = AddIcon.getBufImg(MainImg, MainImgWidth, MainImgHeight, type);
                //Do not use the general Java image IO if you want to preserve image quality
                Iterator iter = ImageIO.getImageWritersByFormatName(format);
                ImageWriter writer = (ImageWriter)iter.next();
                // instantiate an ImageWriteParam object with default compression options
                ImageWriteParam iwp = writer.getDefaultWriteParam();
                if(type==false){
                    iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                    iwp.setCompressionQuality(0.945f);   // a Float between 0 and 1
                    // 1 specifies minimum compression and maximum quality
                }
                try {
                        FileImageOutputStream output = new FileImageOutputStream(file);
                        writer.setOutput(output);
                        IIOImage image = new IIOImage(bufMainImg, null, null);
                        writer.write(null, image, iwp);
                        writer.dispose();
                } catch (IOException e) {
                        System.out.println ("Error saving File : " + e.getMessage() );
                }
            }
            else {
                //Barf.append("Save cancelled by user." + newline);
            }
                //Reset the file chooser for the next time it's shown.
            fc.setSelectedFile(null);
            file=null;
            fc=null;
            boolEdgeDetect = false;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape = false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
        }
    }//GEN-LAST:event_SavetoFileActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
        boolEdgeDetect = false;
        boolAddLEdge = false;
        boolTouchUpPaint = false;
        boolAddPaint = false; boolSelectPaint = false;
        boolAddCEdge = false;
        boolEraseEdge = false;
        boolReplacePaint = false;
        boolHaveColor=false; boolAddShape = false; Selected=null;
        boolGetColor=false;boolCircle = false; boolRect = false;
        MainImg=null;
        file=null;
        ImageData=null;
        PixelData = null;
        ModImg=null;
        MIS=null;
        ImageScrollPaneLabel.setIcon(null);
        }
    }//GEN-LAST:event_ClearActionPerformed


    private void ShowEdgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowEdgesActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolHaveColor=false; boolAddShape = false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
            Newpix.destroyAddEdgetoPic();
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_ShowEdgesActionPerformed

    private void SaveOutlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveOutlineActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
            if(boolSketchOK==true){
                //EdgeMask emask = new EdgeMask(checkfile, EdgeMatrix, MainImgWidth, MainImgHeight);
                EdgeMask emask = new EdgeMask(checkfile, ImageData, MainImgWidth, MainImgHeight);
                int i = checkfile.lastIndexOf('.');
                String bname = checkfile;
                if (i > 0 &&  i < checkfile.length() - 1) {
                    bname = checkfile.substring(0,i);
                }
                file = new File(bname+".msk");
                if (fc == null) {
                    fc = new JFileChooser();
                    fc.addChoosableFileFilter(new MASFilter());
                }
                fc.setSelectedFile(file);
                int returnVal = fc.showDialog(MainDisplay.this,"Save Outline");
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    file = fc.getSelectedFile();
                    try {
                        //File data = new File("filename.txt");
                        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));
                        out.writeObject(emask);
                        out.close();
                        System.out.println("Outline saved successfully");
                    }
                    catch (Exception e) {
                        System.out.println("Error saving Outline : " + e.getMessage());
                    }
                }
            //Reset the file chooser for the next time it's shown.
            fc.setSelectedFile(null);
            file=null;
            fc = null;
            }
            else JOptionPane.showMessageDialog(this,"No outline data. Use Edge Detect, Add Line \n" +
                    "or Curvy Edge to create an outline.", "Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SaveOutlineActionPerformed

    private void SelectShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectShapeActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolTouchUpPaint = false;
            boolAddLEdge = false; boolSelectPaint = false;
            boolAddPaint = false;
            boolAddCEdge = false;
            boolSketchOK = true;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=true; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Selects contiguous area based on color similarity in image\n"
                    +"You can adjust the Threshold to adjust selection\n"
                    +"You can also add outlines to define boundaries for area selection");
        }
    }//GEN-LAST:event_SelectShapeActionPerformed

    private void ZoomXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ZoomXStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        Zoom = (double)(source.getValue());
        Zoom = 50.0/(Zoom+1);
        if(MainImg!=null){
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
    }//GEN-LAST:event_ZoomXStateChanged

    private void EdgeSlopeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_EdgeSlopeStateChanged
        // TODO add your handling code here:
        // it is now being used for brightness
        JSlider source = (JSlider)evt.getSource();
        int EdgeFactor = 50;
            EdgeFactor = source.getValue();
        Light = (double)(EdgeFactor-50.0);
        Light = 4*Light;
    }//GEN-LAST:event_EdgeSlopeStateChanged

    private void TextureSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TextureSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        int EdgeFactor = 50;
            EdgeFactor = source.getValue();
        TextureX = (double)(EdgeFactor/50.0);
        TextureX = TextureX*TextureX*TextureX*TextureX;
    }//GEN-LAST:event_TextureSliderStateChanged

    private void ImageScrollPaneLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageScrollPaneLabelMouseMoved
        // TODO add your handling code here:
        if(MainImg!=null){
        if(boolAddLEdge==true || boolTouchUpPaint==true || boolAddCEdge==true || boolEraseEdge==true
                || boolReplacePaint==true || boolEdgeDetect==true || boolCircle==true || boolRect==true
                ||  boolAddShape==true){
            bx = (int)(evt.getX()*Zoom);
            by = (int)(evt.getY()*Zoom);
        }
        if(boolEdgeDetect==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
            ImageScrollPaneLabel.setIcon(AddIcon.RectCurtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, bx, by, BrushWidth));
        }
        if(boolEraseEdge==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            ImageScrollPaneLabel.setIcon(AddIcon.RectCurtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, bx, by, BrushWidth));
        }
        if(boolTouchUpPaint==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            ImageScrollPaneLabel.setIcon(AddIcon.AddCirtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, bx, by, BrushWidth));
        }
        if(boolReplacePaint==true && boolHaveColor==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            ImageScrollPaneLabel.setIcon(AddIcon.AddCirtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, bx, by, BrushWidth));
        }
        if((boolReplacePaint==true && boolGetColor==true) || boolAddLEdge==true || boolAddCEdge==true
              || boolCircle==true || boolRect==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        }
        if(boolAddPaint==true) this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        if(boolAddShape==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            //ImageScrollPaneLabel.setIcon(AddIcon.RectCurtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, bx, by, 2));
        }
        if(boolSelectPaint==true) this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_ImageScrollPaneLabelMouseMoved

    private void ImageScrollPaneLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageScrollPaneLabelMouseClicked
        // TODO add your handling code here:
        //Only case is Add Paint
        bx = (int)(Zoom*evt.getX());
        by = (int)(Zoom*evt.getY());
        // Case 1: Adding paint
        if(boolAddPaint==true && MainImg!=null){
            newColor = SelectColor.getColor();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            AddPaint AddP = new AddPaint(PixelData, ImageData, bx, by, MainImgWidth, MainImgHeight, newColor, TextureX, Light);
            ImageData = AddP.GetMarkDatawPaint();
            PixelData = AddP.GetPixDatawPaint();
            this.setCursor(Cursor.getDefaultCursor());
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
            AddP=null;
        }
        if(boolAddShape==true && MainImg!=null){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            AddShape AddS = new AddShape(PixelData, ImageData, Selected, bx, by, MainImgWidth, MainImgHeight, SenX);
            Selected = AddS.GetSelected();
            this.setCursor(Cursor.getDefaultCursor());
            ModImg = AddIcon.MergeImage(MainImg, AddS.GetShapeImage(), MainImgWidth, MainImgHeight);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
        if(boolSelectPaint==true && MainImg!=null){
            newColor = SelectColor.getColor();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            PaintSelected PaintS = new PaintSelected(PixelData, ImageData, Selected, MainImgWidth, MainImgHeight, newColor, TextureX, Light);
            ImageData = PaintS.GetMarkDatawPaint();
            PixelData = PaintS.GetPixDatawPaint();
            this.setCursor(Cursor.getDefaultCursor());
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
            this.setCursor(Cursor.getDefaultCursor());
            PaintS=null;
        }
    }//GEN-LAST:event_ImageScrollPaneLabelMouseClicked

    private void ImageScrollPaneLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageScrollPaneLabelMouseDragged
        // TODO add your handling code here:
        if(boolEdgeDetect==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int sbx, sby, sex, sey;
            sbx = (int)(ex-BrushWidth-3); sby = (int)(ey-BrushWidth-3);
            sex = (int)(ex+BrushWidth+3); sey = (int)(ey+BrushWidth+3);
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, sbx, sby, sex, sey);
            int[] tempPix = new int[grx[4]*grx[5]];
            byte[][] tempEdge = new byte[grx[5]][grx[4]];
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    tempPix[(i-grx[1])*grx[4]+(j-grx[0])] = PixelData[i*MainImgWidth+j];
                    tempEdge[i-grx[1]][j-grx[0]] = ImageData[i][j];
                }
            }
            EdgeDetect ed = new EdgeDetect(tempPix, tempEdge, grx, SolpeMult);
            tempEdge = ed.GetEdgeData();
            tempPix = ed.GetPixDatawEdge();
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    ModData[i*MainImgWidth+j]=tempPix[(i-grx[1])*grx[4]+(j-grx[0])];
                    ImageData[i][j] = tempEdge[i-grx[1]][j-grx[0]];
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.RectCurtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, ex, ey, BrushWidth));
            bx = ex;
            by = ey;
        }
        if(boolAddLEdge==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            ImageScrollPaneLabel.setIcon(AddIcon.AddEdgetoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, gbx));
        }
        if(boolAddCEdge==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j = grx[0]; j<=grx[2]; j++){
                    if(MarkShape.Line(i, j, gbx)==true){
                        //EdgeMatrix[i][j] = 1;
                        ImageData[i][j] = (byte)(ImageData[i][j] | bEdge);
                        PixelData[i*MainImgWidth+j] = (0xFFFFFFFF);
                    }
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
            bx = ex;
            by = ey;
        }
        if(boolRect==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            ImageScrollPaneLabel.setIcon(AddIcon.AddRecttoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, gbx));
        }
        if(boolCircle==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            //int[] gbx = SetOrder.GetZBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey, Zoom);
            int[] gbx = SetOrder.GetRectXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            ImageScrollPaneLabel.setIcon(AddIcon.DrawCirtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, gbx));
        }
        if(boolEraseEdge==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int sbx, sby, sex, sey;
            sbx = (int)(ex-BrushWidth-1); sby = (int)(ey-BrushWidth-1);
            sex = (int)(ex+BrushWidth+1); sey = (int)(ey+BrushWidth+1);
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, sbx, sby, sex, sey);
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j = grx[0]; j<=grx[2]; j++){
                    if(((byte)(ImageData[i][j] & bEdge))== 48){
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNEdge);
                        PixelData[i*MainImgWidth+j] = (0xFFFF0000);
                    }
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.RectCurtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, ex, ey, BrushWidth));
            bx = ex;
            by = ey;
        }
        if(boolTouchUpPaint==true && MainImg!=null){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int sbx, sby, sex, sey;
            sbx = (int)(ex-BrushWidth-1); sby = (int)(ey-BrushWidth-1);
            sex = (int)(ex+BrushWidth+1); sey = (int)(ey+BrushWidth+1);
            newColor = SelectColor.getColor();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, sbx, sby, sex, sey);
            int[] tempPix = new int[grx[4]*grx[5]];
            byte[][] tempMark = new byte[grx[5]][grx[4]];
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    tempPix[(i-grx[1])*grx[4]+(j-grx[0])] = PixelData[i*MainImgWidth+j];
                    tempMark[i-grx[1]][j-grx[0]] = ImageData[i][j];
                }
            }
            TouchPaint Tpaint = new TouchPaint(tempPix, tempMark, newColor, grx, BrushWidth, TextureX, Light);
            tempMark = Tpaint.GetMarkDatawTPaint();
            tempPix = Tpaint.GetPixDatawTPaint();
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    PixelData[i*MainImgWidth+j]=tempPix[(i-grx[1])*grx[4]+(j-grx[0])];
                    ImageData[i][j] = tempMark[i-grx[1]][j-grx[0]];
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.AddCirtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, ex, ey, BrushWidth));
            this.setCursor(Cursor.getDefaultCursor());
            Tpaint.destroyTouchPaint();
            Tpaint=null;
            bx = ex;
            by = ey;
        }
        if(boolReplacePaint==true && MainImg!=null && boolGetColor==true){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            ImageScrollPaneLabel.setIcon(AddIcon.AddRecttoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, gbx));
        }
        if(boolReplacePaint==true && MainImg!=null && boolHaveColor==true){
            ex = (int)(evt.getX()*Zoom);
            ey = (int)(evt.getY()*Zoom);
            int sbx, sby, sex, sey;
            sbx = (int)(ex-BrushWidth-1); sby = (int)(ey-BrushWidth-1);
            sex = (int)(ex+BrushWidth+1); sey = (int)(ey+BrushWidth+1);
            reColor[0] = SelectColor.getColor();
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, sbx, sby, sex, sey);
            int[] tempPix = new int[grx[4]*grx[5]];
            byte[][] tempMark = new byte[grx[5]][grx[4]];
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    tempPix[(i-grx[1])*grx[4]+(j-grx[0])] = PixelData[i*MainImgWidth+j];
                    tempMark[i-grx[1]][j-grx[0]] = ImageData[i][j];
                }
            }
            ReplacePaint rpaint = new ReplacePaint(tempPix, tempMark, reColor, grx, BrushWidth, TextureX, Light);
            tempMark = rpaint.GetMarkwRePaint();
            tempPix = rpaint.GetPixwRePaint();
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j=grx[0]; j<=grx[2]; j++){
                    PixelData[i*MainImgWidth+j]=tempPix[(i-grx[1])*grx[4]+(j-grx[0])];
                    ImageData[i][j] = tempMark[i-grx[1]][j-grx[0]];
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.AddCirtoImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom, ex, ey, BrushWidth));
            this.setCursor(Cursor.getDefaultCursor());
            rpaint.destroyRePaint();
            rpaint=null;
            bx = ex;
            by = ey;
        }
    }//GEN-LAST:event_ImageScrollPaneLabelMouseDragged

    private void ImageScrollPaneLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageScrollPaneLabelMouseReleased
        // TODO add your handling code here:
        //Case1: If Add Edge is on
        if(boolAddLEdge==true && MainImg!=null){
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j = grx[0]; j<=grx[2]; j++){
                    if(MarkShape.Line(i, j, gbx)==true){
                        //EdgeMatrix[i][j] = 1;
                        ImageData[i][j] = (byte)(ImageData[i][j] | bEdge);
                        PixelData[i*MainImgWidth+j] = (0xFFFFFFFF);
                    }
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
        if(boolRect==true && MainImg!=null){
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            //int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j = grx[0]; j<=grx[2]; j++){
                    if(MarkShape.Rect(i, j, grx)==true){
                        //EdgeMatrix[i][j] = 1;
                        ImageData[i][j] = (byte)(ImageData[i][j] | bEdge);
                        PixelData[i*MainImgWidth+j] = (0xFFFFFFFF);
                    }
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
        if(boolCircle==true && MainImg!=null){
            int[] grx = SetOrder.GetRectXYWH(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            //int[] gbx = SetOrder.GetBoundXY(MainImgWidth, MainImgHeight, bx, by, ex, ey);
            for(int i=grx[1]; i<=grx[3]; i++){
                for(int j = grx[0]; j<=grx[2]; j++){
                    if(MarkShape.Ellipse(i, j, grx)==true){
                        //EdgeMatrix[i][j] = 1;
                        ImageData[i][j] = (byte)(ImageData[i][j] | bEdge);
                        PixelData[i*MainImgWidth+j] = (0xFFFFFFFF);
                    }
                }
            }
            MIS.newPixels(grx[0], grx[1], grx[4], grx[5]);
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
        if(boolEraseEdge==true && MainImg!=null){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            this.setCursor(Cursor.getDefaultCursor());
            ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
        }
        if(boolReplacePaint==true && MainImg!=null && boolGetColor==true){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            IdentifyColor colorid = new IdentifyColor(PixelData, MainImgWidth, MainImgHeight, bx, by, ex, ey);
            Color avgColor = colorid.getIdentifyColor();
            Color maxColor = colorid.getIdColormax();
            Color minColor = colorid.getIdColormin();
            this.setCursor(Cursor.getDefaultCursor());
            ImageIcon ii = AddIcon.DialogImageIcon(avgColor, maxColor, minColor);
            Object[] options = {"Yes", "No"};
            int n = JOptionPane.showOptionDialog(this, "Do you want to change this Color?","Check Color",
                            JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, ii, options, options[0]);
            if (n == JOptionPane.YES_OPTION) {
                boolHaveColor=true;
                boolGetColor=false;
                //reColor[0] = newColor;********DONOT DELETE NEED for reference*****
                reColor[1] = avgColor;
                reColor[2] = maxColor;
                reColor[3] = minColor;
                JOptionPane.showMessageDialog(this,"Select Color, set Shadow & Light Effects and\n" +
                    "Drag the Mouse in the area where you want to paint.");
            } else if (n == JOptionPane.NO_OPTION) {
                        JOptionPane.showMessageDialog(this,"Try again! You can\n"+"use Zoom to find the right color.");
                   } else {
                        //JOptionPane.showMessageDialog(this,"Are you bored?");
                   }
        }
    }//GEN-LAST:event_ImageScrollPaneLabelMouseReleased

    private void EdgeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeComboBoxActionPerformed
        // TODO add your handling code here:
        String edgetype = (String)EdgeComboBox.getSelectedItem();
        //EdgeDetect
        if(edgetype.equals("Auto Detect Outlines")){
        if(MainImg!=null){
            boolEdgeDetect = true;
            boolTouchUpPaint = false;
            boolAddLEdge = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolSketchOK = true;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            ModData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(ModData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image where you want\n" +
                    "to Auto Detect Edges. You can adjust\n"+
                    "Brush size to change the area of where\n"+
                    "you want to detect edges");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
        //AddLEdge
        if(edgetype.equals("Add Straight Line")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolSketchOK = true;
            boolAddLEdge = true;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image to draw straight Edge");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
         //AddCEdge
        if(edgetype.equals("Add Curved Line")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolSketchOK = true;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = true;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image to draw curved Edge");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
         //AddCircle
        if(edgetype.equals("Add Oval")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolSketchOK = true;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false; boolCircle = true; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image to draw Oval");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
         //AddRectangle
        if(edgetype.equals("Add Rectangle")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolSketchOK = true;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false; boolCircle = false; boolRect = true;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image to draw rectangle");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
        //EraseEdge
        if(edgetype.equals("Erase Outlines")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolAddLEdge = false;
            boolTouchUpPaint = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = true;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            AddEdgetoPic Newpix = new AddEdgetoPic(PixelData, ImageData, MainImgWidth, MainImgHeight, false);
            PixelData = Newpix.GetPixDatawNewEdge();
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Drag the Mouse on image where you want\n"+
                    "to Erase Edges You can adjust Brush size\n"+
                    "to change the Erase area size");
            Newpix.destroyAddEdgetoPic();
            Newpix=null;
        }
        }
    }//GEN-LAST:event_EdgeComboBoxActionPerformed

    private void PaintComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaintComboBoxActionPerformed
        // TODO add your handling code here:
        String painttype = (String)PaintComboBox.getSelectedItem();
         //Paint Object
        if(painttype.equals("Paint Outlined Area")){
            if(MainImg!=null){
            boolEdgeDetect = false;
            boolAddPaint = true;
            boolAddLEdge = false; boolSelectPaint = false;
            boolTouchUpPaint = false;
            boolAddCEdge = false;
            boolEraseEdge = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            PixelData = (int[])m_pixelData;
            for(int i = 0; i < MainImgHeight; i++){
                for(int j =0; j< MainImgWidth; j++){
                    //tempMarkedX[i][j] = MarkedX[i][j];
                    if(((byte)(ImageData[i][j] & bMark))== 12){
                        ImageData[i][j] = (byte)(ImageData[i][j] | btMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNtMark);
                    }
                }
            }
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Select Color, set Shadow & Light Effects and\n" +
                    "Click the Mouse in the area where you want to paint.");
        }
        }
         //Paint Selected Area
        if(painttype.equals("Paint Selected Area")){
            if(MainImg!=null){
            if(Selected!=null){
                boolEdgeDetect = false;
                boolAddPaint = false; boolSelectPaint = true;
                boolAddLEdge = false;
                boolTouchUpPaint = false;
                boolAddCEdge = false;
                boolEraseEdge = false;
                boolHaveColor=false; boolAddShape=false;
                boolGetColor=false; boolCircle = false; boolRect = false;
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
                gifPixelGrabber.grabPixels();
                Object m_pixelData=gifPixelGrabber.getPixels();
                PixelData = (int[])m_pixelData;
                PixelData = (int[])m_pixelData;
                for(int i = 0; i < MainImgHeight; i++){
                    for(int j =0; j< MainImgWidth; j++){
                        //tempMarkedX[i][j] = MarkedX[i][j];
                        if(((byte)(ImageData[i][j] & bMark))== 12){
                            ImageData[i][j] = (byte)(ImageData[i][j] | btMark);
                        }
                        else{
                            ImageData[i][j] = (byte)(ImageData[i][j] & bNtMark);
                        }
                    }
                }
                MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
                ModImg = createImage(MIS);
                this.setCursor(Cursor.getDefaultCursor());
                JOptionPane.showMessageDialog(this,"Select Color, set Shadow & Light Effects and\n" +
                    "Click the Mouse in the area where you want to paint.");
            }
            else{
                boolEdgeDetect = false;
                boolAddPaint = false; boolSelectPaint = false;
                boolAddLEdge = false;
                boolTouchUpPaint = false;
                boolAddCEdge = false;
                boolEraseEdge = false;
                boolHaveColor=false; boolAddShape=false;
                boolGetColor=false;boolCircle = false; boolRect = false;
                JOptionPane.showMessageDialog(this,"You don't have area selected!\n"
                        +"Select area first using Select","Error", JOptionPane.ERROR_MESSAGE);
            }
            }
        }
        //TouchUpPaint
        if(painttype.equals("Touch Up Paint")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolTouchUpPaint = true;
            boolAddLEdge = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolEraseEdge = false;
            boolAddCEdge = false;
            boolReplacePaint = false;
            boolHaveColor=false; boolAddShape=false; Selected=null;
            boolGetColor=false;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            for(int i = 0; i < MainImgHeight; i++){
                for(int j =0; j< MainImgWidth; j++){
                    //tempMarkedX[i][j] = MarkedX[i][j];
                    if(((byte)(ImageData[i][j] & bMark))== 12){
                        ImageData[i][j] = (byte)(ImageData[i][j] | btMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNtMark);
                    }
                }
            }
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            JOptionPane.showMessageDialog(this,"Select Color, set Shadow & Light Effects and\n" +
                    "Drag the Mouse in the area where you want to paint.");
            }
        }
        //Replace Paint
        if(painttype.equals("Replace Color")){
        if(MainImg!=null){
            boolEdgeDetect = false;
            boolTouchUpPaint = false;
            boolAddLEdge = false;
            boolAddPaint = false; boolSelectPaint = false;
            boolEraseEdge = false;
            boolAddCEdge = false; boolAddShape=false; Selected=null;
            boolReplacePaint = true;boolCircle = false; boolRect = false;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            GetImageInfo gifPixelGrabber=new GetImageInfo(MainImg);
            gifPixelGrabber.grabPixels();
            Object m_pixelData=gifPixelGrabber.getPixels();
            PixelData = (int[])m_pixelData;
            for(int i = 0; i < MainImgHeight; i++){
                for(int j =0; j< MainImgWidth; j++){
                    //tempMarkedX[i][j] = MarkedX[i][j];
                    if(((byte)(ImageData[i][j] & bMark))== 12){
                        ImageData[i][j] = (byte)(ImageData[i][j] | btMark);
                    }
                    else{
                        ImageData[i][j] = (byte)(ImageData[i][j] & bNtMark);
                    }
                }
            }
            MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
            ModImg = createImage(MIS);
            this.setCursor(Cursor.getDefaultCursor());
            //reColor = chColor;
            reColor = new Color[4];
            //reColor[0] = newColor;
            //reColor[1] = avgColorId;
            //reColor[2] = maxColorId;
            //reColor[3] = minColorId;
            boolGetColor = true;
            boolHaveColor = false;
            JOptionPane.showMessageDialog(this,"Identify the color you want to replace from the image by\n"
                    + "Dragging the mouse and selecting the area to identify color.");
        }
        }
    }//GEN-LAST:event_PaintComboBoxActionPerformed

    private void BrushSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrushSpinnerStateChanged
        // TODO add your handling code here:
            Object tmp = BrushSpinner.getValue();
            String tmpstr = tmp.toString();
            int tmpd = Integer.parseInt(tmpstr);
            BrushWidth = tmpd;
    }//GEN-LAST:event_BrushSpinnerStateChanged

    private void ImageScrollPaneLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImageScrollPaneLabelMouseExited
        // TODO add your handling code here:
        this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_ImageScrollPaneLabelMouseExited

    private void senSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_senSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider)evt.getSource();
        SenX = (int)(source.getValue());
    }//GEN-LAST:event_senSliderStateChanged

    private void ClearShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearShapeActionPerformed
        // TODO add your handling code here:
        if(MainImg!=null){
            if(Selected!=null){
                Selected = null;
                MIS.newPixels(PixelData, ICM, 0, MainImgWidth);
                ModImg = createImage(MIS);
                ImageScrollPaneLabel.setIcon(AddIcon.ZoomImageIcon(ModImg, MainImgWidth, MainImgHeight, Zoom));
            }
        }
    }//GEN-LAST:event_ClearShapeActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainDisplay().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner BrushSpinner;
    private javax.swing.JButton Clear;
    private javax.swing.JButton ClearShape;
    private javax.swing.JComboBox EdgeComboBox;
    private javax.swing.JSlider EdgeSlope;
    private javax.swing.JScrollPane ImageScrollPane;
    private javax.swing.JLabel ImageScrollPaneLabel;
    private javax.swing.JButton Load;
    private javax.swing.JComboBox PaintComboBox;
    private javax.swing.JButton Save;
    private javax.swing.JButton SaveOutline;
    private javax.swing.JButton SavetoFile;
    private javax.swing.JColorChooser SelectColor;
    private javax.swing.JButton SelectShape;
    private javax.swing.JButton ShowEdges;
    private javax.swing.JSlider TextureSlider;
    private javax.swing.JSlider ZoomX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider senSlider;
    private javax.swing.JButton undoPaint;
    // End of variables declaration//GEN-END:variables
    
}
